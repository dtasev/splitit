# Simple workflow for deploying static content to GitHub Pages
name: Build

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]


# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "build"
  cancel-in-progress: true

jobs:
  build-and-push:
    environment:
      name: cloud-vm-prod
    runs-on: ubuntu-latest
    steps:
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}w
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa_gcloud # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          config: ${{ secrets.SSH_CONFIG }}
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            react:
              - 'app/**'

      - name: Build vite prod
        if: steps.changes.outputs.react == 'true'
        run: bash build.sh

      - name: SCP to remote
        if: steps.changes.outputs.react == 'true'
        run: scp -r app/dist/ m-prod:~/splitit/app/

      # - name: Build the backend
      #   run: cd backend && bash build.sh --push
      # - name: Build the nginx proxy
      #   run: cd nginx && bash build.sh --push
      # - name: Build the react container
      #   run: bash build.sh --push
      - name: Pull latest
        run: ssh m-prod "cd splitit && git pull"
      - name: Build backend
        run: ssh m-prod "cd splitit/backend && bash build.sh"
      - name: Build nginx
        run: ssh m-prod "cd splitit/nginx && bash build.sh"
      - name: Set env vars for backend
        run: ssh m-prod "cd splitit/backend && echo 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} > .env"
      - name: Compose -d
        run: ssh m-prod "cd splitit && docker-compose -f docker-compose-prod.yaml up -d"